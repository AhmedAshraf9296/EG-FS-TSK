// taken from https://www.npmjs.com/package/twitter_cldr

const is_even = (num: number) => {
  return num % 2 === 0
}

const from_char_code = (code_point: number) => {
  if (code_point > 0xffff) {
    code_point -= 0x10000
    return String.fromCharCode(
      0xd800 + (code_point >> 10),
      0xdc00 + (code_point & 0x3ff),
    )
  } else {
    return String.fromCharCode(code_point)
  }
}

const getMax = (arr: number[]): number => {
  let elem, i, max, start_index, _i, _j, _len, _ref
  max = -Infinity
  for (start_index = _i = 0, _len = arr.length; _i < _len; start_index = ++_i) {
    elem = arr[start_index]
    if (elem != null) {
      max = elem
      break
    }
  }
  for (
    i = _j = start_index, _ref = arr.length;
    start_index <= _ref ? _j <= _ref : _j >= _ref;
    i = start_index <= _ref ? ++_j : --_j
  ) {
    if (arr[i] > max) {
      max = arr[i]
    }
  }
  return max
}

const getMin = (arr: number[]) => {
  let elem, i, min, start_index, _i, _j, _len, _ref
  min = Infinity
  for (start_index = _i = 0, _len = arr.length; _i < _len; start_index = ++_i) {
    elem = arr[start_index]
    if (elem != null) {
      min = elem
      break
    }
  }
  for (
    i = _j = start_index, _ref = arr.length;
    start_index <= _ref ? _j <= _ref : _j >= _ref;
    i = start_index <= _ref ? ++_j : --_j
  ) {
    if (arr[i] < min) {
      min = arr[i]
    }
  }
  return min
}

const pack_array = (char_arr: string[]) => {
  let cur_char
  return function () {
    let _i, _len
    const _results = []
    for (_i = 0, _len = char_arr.length; _i < _len; _i++) {
      cur_char = char_arr[_i]
      _results.push(from_char_code(cur_char as unknown as number))
    }
    return _results
  }
    .call(this)
    .join('')
}

const char_code_at = function (str: string, idx: number): string | number {
  let hi, li, low
  str += ''
  const end = str.length
  const surrogatePairs = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g
  while (surrogatePairs.exec(str) !== null) {
    li = surrogatePairs.lastIndex
    if (li - 2 < idx) {
      idx += 1
    } else {
      break
    }
  }
  if (idx >= end || idx < 0) {
    return NaN
  }
  const code = str.charCodeAt(idx)
  if (0xd800 <= code && code <= 0xdbff) {
    hi = code
    low = str.charCodeAt(idx + 1)
    return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000
  }
  return code
}
const unpack_string = (str: string): [string] => {
  let code_point, idx, _i, _ref
  const result = []
  for (
    idx = _i = 0, _ref = str.length;
    0 <= _ref ? _i < _ref : _i > _ref;
    idx = 0 <= _ref ? ++_i : --_i
  ) {
    code_point = char_code_at(str, idx)
    if (!code_point) {
      break
    }
    result.push(code_point)
  }
  return result as [string]
}

const bidi_class_for = function (code_point: unknown) {
  let bidi_class, end, range, range_list, range_offset, ranges, start, _i, _len
  const _ref = bidi_classes
  for (bidi_class in _ref) {
    ranges = _ref[bidi_class as keyof typeof bidi_classes]
    for (range_offset in ranges) {
      range_list = ranges[range_offset as keyof typeof ranges]
      for (_i = 0, _len = range_list.length; _i < _len; _i++) {
        range = range_list[_i]
        start = range
        end = start + parseInt(range_offset)
        if (
          (code_point as unknown as number) >= start &&
          (code_point as unknown as number) <= end
        ) {
          return bidi_class
        }
      }
    }
  }
  return null
}
const compute_types = (arr: string[]) => {
  let code_point, _i, _len
  const _results = []
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    code_point = arr[_i]
    _results.push(bidi_class_for(code_point))
  }
  return _results
}

export const from_string = (
  str: string,
  options: {
    direction?: 'LTR' | 'RTL'
  },
) => {
  let string_arr = null
  if (options == null) {
    options = {}
  }
  string_arr = unpack_string(str)
  return new Bidi({
    string_arr: string_arr,
    direction: options.direction,
    types: compute_types(string_arr),
  })
}

class Bidi {
  string_arr: string[]
  direction: 'LTR' | 'RTL'
  types: (string | null)[]
  levels: number[]
  runs: number[]

  constructor(options: {
    direction?: 'LTR' | 'RTL'
    string_arr: string[]
    types: (string | null)[]
  }) {
    this.string_arr = options.string_arr
    this.direction = options.direction || 'LTR'
    this.types = options.types
    this.levels = []
    this.runs = []
  }

  reorder_visually() {
    let depth,
      finish,
      i,
      level,
      lowest_odd,
      max = 0,
      start,
      tmpb,
      tmpo,
      _i,
      _j,
      _k,
      _len,
      _ref1
    if (!this.string_arr) {
      throw 'No string given!'
    }
    lowest_odd = MAX_DEPTH + 1
    const _ref = this.levels
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      level = _ref[_i]
      max = getMax([level, max])
      if (!is_even(level)) {
        lowest_odd = getMin([lowest_odd, level])
      }
    }
    for (
      depth = _j = max;
      max <= 0 ? _j < 0 : _j > 0;
      depth = max <= 0 ? ++_j : --_j
    ) {
      start = 0
      while (start < this.levels.length) {
        while (start < this.levels.length && this.levels[start] < depth) {
          start += 1
        }
        if (start === this.levels.length) {
          break
        }
        finish = start + 1
        while (finish < this.levels.length && this.levels[finish] >= depth) {
          finish += 1
        }
        for (
          i = _k = 0, _ref1 = (finish - start) / 2;
          0 <= _ref1 ? _k < _ref1 : _k > _ref1;
          i = 0 <= _ref1 ? ++_k : --_k
        ) {
          tmpb = this.levels[finish - i - 1]
          this.levels[finish - i - 1] = this.levels[start + i]
          this.levels[start + i] = tmpb
          tmpo = this.string_arr[finish - i - 1]
          this.string_arr[finish - i - 1] = this.string_arr[start + i]
          this.string_arr[start + i] = tmpo
        }
        start = finish + 1
      }
    }
    return this
  }

  toString() {
    return pack_array(this.string_arr)
  }
}

const MAX_DEPTH = 62

const bidi_classes = {
  BN: {
    '8': [0],
    '13': [14],
    '5': [127, 8298],
    '25': [134],
    '0': [173, 65279, 917505],
    '2': [8203],
    '4': [8288],
    '7': [119155],
    '95': [917536],
  },
  S: { '0': [9, 11, 31] },
  B: { '0': [10, 13, 133, 8233], '2': [28] },
  WS: { '0': [12, 32, 5760, 6158, 8232, 8287, 12288], '10': [8192] },
  ON: {
    '1': [
      33, 171, 174, 697, 884, 900, 1542, 1550, 5787, 6468, 8189, 8448, 8456,
      8506, 12342, 12443, 12829, 13278, 42622, 64830, 65120, 65281, 126704,
      127338,
    ],
    '4': [38, 187, 8512, 65286, 65529, 127942],
    '5': [59, 91, 3059, 8478, 11493, 65307, 65339, 127792],
    '3': [
      123, 166, 2038, 3898, 8451, 8522, 12289, 13004, 13175, 43048, 43124,
      128249, 128320,
    ],
    '0': [
      161, 180, 215, 247, 894, 903, 1014, 1418, 1758, 1769, 3066, 5120, 6464,
      8125, 8468, 8485, 8487, 8489, 8585, 12336, 12448, 12539, 13311, 42611,
      42888, 65021, 65105, 65108, 65128, 65131, 65793, 67871, 119365, 120539,
      120597, 120655, 120713, 120771, 128064,
    ],
    '2': [
      182, 8127, 8141, 8157, 8173, 8316, 8332, 8470, 12349, 12924, 42509, 65124,
      65506,
    ],
    '13': [706, 722, 127153],
    '8': [741, 65110],
    '16': [751, 127968],
    '6': [3192, 11513, 65512, 68409],
    '9': [5008, 6128, 11088, 65040],
    '10': [6144, 9280, 65371, 128581],
    '33': [6622, 42752],
    '23': [8208, 128336],
    '14': [8245, 12977, 127136, 127169, 127185],
    '25': [8261, 9083, 11904],
    '15': [8528, 12880],
    '129': [8592],
    '289': [8724],
    '93': [9110],
    '38': [9216],
    '39': [9312],
    '449': [9450],
    '82': [9901],
    '254': [9985],
    '588': [10496],
    '59': [11776],
    '88': [11931],
    '213': [12032],
    '11': [12272, 65936],
    '24': [12296],
    '35': [12736],
    '63': [19904],
    '54': [42128],
    '31': [65072],
    '74': [65856],
    '19': [69714, 127872],
    '65': [119296],
    '86': [119552],
    '43': [126976],
    '99': [127024],
    '32': [127744],
    '69': [127799, 128507, 128640],
    '36': [127904],
    '62': [128000],
    '181': [128066],
    '61': [128256],
    '115': [128768],
  },
  ET: {
    '2': [35, 65283],
    '3': [162],
    '1': [176, 1545, 2546, 43064, 65129, 65504, 65509],
    '0': [1423, 1642, 2555, 2801, 3065, 3647, 6107, 8494, 8723, 65119],
    '4': [8240],
    '25': [8352],
  },
  ES: { '0': [43, 45, 8722, 64297, 65291, 65293], '1': [8314, 8330, 65122] },
  CS: {
    '0': [44, 58, 160, 1548, 8239, 8260, 65104, 65106, 65109, 65292, 65306],
    '1': [46, 65294],
  },
  EN: {
    '9': [48, 1776, 8320, 65296],
    '1': [178],
    '0': [185, 8304],
    '5': [8308],
    '19': [9352],
    '49': [120782],
    '10': [127232],
  },
  L: {
    '25': [65, 97, 5761, 6576, 65313, 65345, 65549],
    '0': [
      170, 181, 186, 750, 902, 908, 1417, 2363, 2482, 2510, 2519, 2563, 2654,
      2691, 2761, 2768, 2880, 2903, 2947, 2972, 3024, 3031, 3133, 3199, 3294,
      3406, 3415, 3517, 3716, 3722, 3725, 3749, 3751, 3773, 3782, 3894, 3896,
      3967, 3973, 4145, 4152, 4295, 4301, 4696, 4800, 6070, 6108, 6314, 6743,
      6753, 6965, 6971, 7082, 7143, 7150, 7379, 7393, 8025, 8027, 8029, 8126,
      8206, 8305, 8319, 8450, 8455, 8469, 8484, 8486, 8488, 9109, 9900, 11559,
      11565, 43047, 43597, 43697, 43712, 43714, 65792, 65794, 69632, 69932,
      71340, 71350, 119970, 119995, 120134,
    ],
    '22': [192, 3090, 3218, 6656, 11648],
    '30': [216, 8031, 13280, 66304, 127248],
    '448': [248],
    '6': [
      699, 1369, 2425, 2474, 2548, 2602, 2730, 2858, 3449, 3520, 3648, 3737,
      4688, 4792, 6100, 8118, 8134, 8182, 11680, 11688, 11696, 11704, 11712,
      11720, 11728, 11736, 43808, 43816, 64256, 69703, 69819, 119997, 120086,
      120138,
    ],
    '1': [
      720, 886, 2434, 2447, 2503, 2507, 2524, 2575, 2610, 2613, 2616, 2738,
      2763, 2784, 2818, 2831, 2866, 2877, 2887, 2891, 2908, 2969, 2974, 2979,
      3006, 3009, 3160, 3168, 3202, 3274, 3285, 3296, 3313, 3330, 3424, 3458,
      3634, 3713, 3719, 3754, 3762, 4155, 4227, 5941, 6087, 6448, 6755, 7078,
      7154, 7220, 7413, 8526, 11506, 11631, 12334, 43346, 43444, 43450, 43486,
      43567, 43571, 43701, 44006, 65596, 69815, 71342, 110592, 119171, 119966,
      119973, 127568,
    ],
    '4': [
      736, 2741, 2869, 3125, 3253, 3776, 3976, 6512, 6973, 8473, 8517, 12337,
      12344, 43705, 64275, 120128,
    ],
    '3': [
      880, 890, 2365, 2377, 2486, 2493, 2649, 2749, 2962, 3137, 3389, 3732,
      3757, 3804, 4186, 4682, 4698, 4746, 4786, 4802, 4882, 5902, 6435, 7401,
      8144, 8490, 8508, 11499, 12540, 42896, 43015, 44009, 66336, 74864, 119977,
      120071, 120123,
    ],
    '2': [
      904, 2382, 2527, 2622, 2674, 2703, 2911, 2958, 2984, 3014, 3018, 3073,
      3086, 3214, 3270, 3342, 3398, 3402, 3535, 3570, 3745, 5998, 6441, 6681,
      7146, 8130, 8178, 12293, 12445, 43011, 43584, 65498,
    ],
    '19': [910, 2404],
    '82': [931],
    '139': [1015],
    '157': [1162, 66560],
    '37': [1329, 7968, 11520, 43264],
    '38': [1377, 119040],
    '54': [2307],
    '9': [
      2392, 2662, 3114, 3174, 3242, 3302, 3792, 3902, 6112, 6160, 6784, 6800,
      8458, 43000, 43250, 43600, 44016, 66720, 69734, 69872, 70079, 70096,
      71360,
    ],
    '7': [
      2437, 2821, 3077, 3205, 3261, 3333, 3544, 4030, 6078, 7360, 8016, 43056,
      43588, 43758, 120077, 120772,
    ],
    '21': [2451, 2579, 2707, 2835],
    '11': [2534, 2990, 12992, 43214, 65536, 119982],
    '5': [
      2565, 2949, 4039, 4231, 6451, 6765, 7406, 7960, 8008, 8150, 42738, 42889,
      43777, 43785, 43793, 65474, 65482, 65490,
    ],
    '8': [2693, 3507, 6979, 7028, 12321, 65847, 119146, 127552],
    '10': [2790, 6608, 8495, 42912, 43471],
    '17': [2918, 3461, 5920, 5952, 119648],
    '12': [3046, 3663, 4046, 4213, 5888, 5984, 8160, 8336, 94099],
    '40': [3346, 4704, 6272, 8544, 12549, 43520],
    '15': [3430, 4193, 4992],
    '23': [3482, 3840, 42624],
    '47': [3585, 6916, 7164, 12832, 43395, 43648, 119214],
    '26': [3866, 6992, 66352],
    '35': [3913, 69891],
    '44': [4096, 12784, 65799, 66000],
    '24': [4159, 43020, 43310, 69840],
    '14': [4238, 4808, 7227, 65599],
    '39': [4254, 6470],
    '376': [4304],
    '32': [4752],
    '56': [4824, 120540, 120598, 120656, 120714],
    '66': [4888],
    '28': [4960, 6400, 66176, 127462],
    '84': [5024, 119808],
    '638': [5121],
    '80': [5792],
    '51': [6016, 43072, 70018],
    '87': [6176],
    '69': [6320],
    '43': [6528],
    '55': [6686, 11568],
    '13': [6816, 65616, 66504, 69942],
    '31': [7042, 43612],
    '57': [7084, 127280],
    '50': [7245, 120488],
    '191': [7424],
    '277': [7680],
    '52': [8064],
    '68': [9014, 93952],
    '77': [9372],
    '255': [10240],
    '46': [11264, 11312, 13008, 42560, 94032],
    '132': [11360],
    '85': [12353],
    '89': [12449],
    '93': [12593],
    '42': [12688, 71296, 127344, 127504],
    '27': [12896, 42512, 120094],
    '49': [12927],
    '118': [13056],
    '98': [13179, 74752],
    '6591': [13312],
    '22156': [19968],
    '316': [42192],
    '79': [42656],
    '101': [42786],
    '67': [43136],
    '29': [43359, 66432, 119180],
    '16': [43453, 43739],
    '36': [43968, 66463],
    '11206': [44032],
    '48': [55243, 66208, 69762],
    '8813': [55296],
    '105': [64112],
    '88': [65382],
    '18': [65576],
    '122': [65664],
    '53': [69634],
    '878': [73728],
    '1070': [77824],
    '568': [92160],
    '245': [118784],
    '61': [119081],
    '70': [119894],
    '64': [120005],
    '339': [120146],
    '42719': [131072],
    '4383': [173824],
    '541': [194560],
    '131071': [983040],
  },
  NSM: {
    '111': [768],
    '6': [1155, 1750, 2385, 3636, 6071, 6744, 7394, 65056, 119173],
    '44': [1425],
    '0': [
      1471, 1479, 1648, 1809, 2362, 2364, 2381, 2433, 2492, 2509, 2620, 2641,
      2677, 2748, 2765, 2817, 2876, 2879, 2893, 2902, 2946, 3008, 3021, 3260,
      3405, 3530, 3542, 3633, 3761, 3893, 3895, 3897, 4038, 4226, 4237, 4253,
      6086, 6109, 6313, 6450, 6742, 6752, 6754, 6783, 6964, 6972, 6978, 7083,
      7142, 7149, 7405, 7412, 11647, 42655, 43010, 43014, 43019, 43204, 43443,
      43452, 43587, 43596, 43696, 43713, 43766, 44005, 44008, 44013, 64286,
      66045, 68159, 69633, 71339, 71341, 71351,
    ],
    '1': [
      1473, 1476, 1767, 2402, 2530, 2561, 2625, 2631, 2672, 2689, 2759, 2786,
      2914, 3157, 3170, 3276, 3298, 3426, 3771, 3864, 3974, 4153, 4157, 4184,
      4229, 5970, 6002, 6068, 6439, 6679, 7040, 7080, 7144, 7222, 12441, 42736,
      43045, 43569, 43573, 43703, 43710, 43756, 68101, 69760, 69817, 70016,
    ],
    '10': [1552, 1958, 3981, 6089, 43335],
    '20': [1611],
    '5': [1759, 3764, 3784, 4146, 43561, 71344],
    '3': [
      1770, 2070, 2497, 2881, 3146, 3393, 4141, 4209, 6912, 7074, 7676, 12330,
      42607, 43446, 68108, 69811, 94095, 119210,
    ],
    '26': [1840, 2276],
    '8': [2027, 2075, 7019, 70070],
    '2': [
      2085, 2137, 2304, 2635, 3134, 3142, 3538, 4190, 4957, 5906, 5938, 6155,
      6432, 6457, 7151, 7376, 11503, 43392, 43698, 68097, 68152, 69888, 119143,
      119362,
    ],
    '4': [2089, 2753, 3968, 6966, 69927],
    '7': [2369, 3655, 6757, 7212, 43302, 69933, 119163],
    '13': [3953],
    '35': [3993],
    '9': [6771, 42612],
    '12': [7380],
    '38': [7616],
    '32': [8400],
    '31': [11744],
    '17': [43232],
    '15': [65024],
    '14': [69688],
    '239': [917760],
  },
  R: {
    '0': [
      1470, 1472, 1475, 1478, 2042, 2074, 2084, 2088, 2142, 8207, 64285, 64318,
      67592, 67644, 67903, 68096,
    ],
    '26': [1488, 68121, 68440],
    '4': [1520, 64312],
    '42': [1984],
    '1': [2036, 64320, 64323, 67639, 68030],
    '21': [2048, 68416],
    '14': [2096],
    '24': [2112],
    '9': [64287, 64326],
    '12': [64298],
    '5': [67584],
    '43': [67594],
    '22': [67647],
    '8': [67671, 68176],
    '27': [67840],
    '25': [67872],
    '55': [67968],
    '3': [68112],
    '2': [68117],
    '7': [68160, 68472],
    '31': [68192],
    '53': [68352],
    '72': [68608],
  },
  AN: { '4': [1536], '9': [1632], '1': [1643], '0': [1757], '30': [69216] },
  AL: {
    '0': [
      1544, 1547, 1549, 1563, 1969, 2208, 126500, 126503, 126521, 126523,
      126530, 126535, 126537, 126539, 126548, 126551, 126553, 126555, 126557,
      126559, 126564, 126590,
    ],
    '44': [1566],
    '2': [1645, 126541, 126625],
    '100': [1649],
    '1': [1765, 1774, 1807, 126497, 126545, 126561],
    '19': [1786],
    '29': [1810],
    '88': [1869],
    '10': [2210],
    '113': [64336],
    '362': [64467],
    '63': [64848],
    '53': [64914],
    '12': [65008],
    '4': [65136, 126629],
    '134': [65142],
    '3': [126464, 126516, 126567, 126580, 126585],
    '26': [126469],
    '9': [126505, 126592],
    '6': [126572],
    '16': [126603, 126635],
  },
  LRE: { '0': [8234] },
  RLE: { '0': [8235] },
  PDF: { '0': [8236] },
  LRO: { '0': [8237] },
  RLO: { '0': [8238] },
} as const
